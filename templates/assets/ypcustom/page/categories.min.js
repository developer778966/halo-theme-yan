import {d, U as y, _ as c, s as _} from "../main.min.js";
import "../assets/_commonjsHelpers-042e6b4d.js";
var m = Object.defineProperty
  , h = Object.getOwnPropertyDescriptor
  , u = (l, a, t, o) => {
    for (var r = o > 1 ? void 0 : o ? h(a, t) : a, i = l.length - 1, n; i >= 0; i--)
        (n = l[i]) && (r = (o ? n(a, t, r) : n(r)) || r);
    return o && r && m(a, t, r),
    r
}
;
class p {
    registerCategories() {
        document.querySelectorAll(".categories-container .chip").forEach(t => {
            t.style.backgroundColor || (t.style.backgroundColor = p.generateColor())
        }
        )
    }

    static generateColor() {
        const e = Math.floor(Math.random() * 360)
          , t = Math.floor(Math.random() * 50) + 50
          , i = Math.floor(Math.random() * 40) + 50
          , n = e / 60
          , o = t / 100
          , a = i / 100
          , s = (1 - Math.abs(2 * a - 1)) * o
          , u = s * (1 - Math.abs(n % 2 - 1))
          , l = a - s / 2;
        let c, f, g;
        0 <= n && n < 1 ? [c,f,g] = [s, u, 0] : 1 <= n && n < 2 ? [c,f,g] = [u, s, 0] : 2 <= n && n < 3 ? [c,f,g] = [0, s, u] : 3 <= n && n < 4 ? [c,f,g] = [0, u, s] : 4 <= n && n < 5 ? [c,f,g] = [u, 0, s] : [c,f,g] = [s, 0, u],
        c = Math.round((c + l) * 255),
        f = Math.round((f + l) * 255),
        g = Math.round((g + l) * 255);
        const d = c.toString(16).padStart(2, "0")
          , h = f.toString(16).padStart(2, "0")
          , v = g.toString(16).padStart(2, "0");
        return `#${d}${h}${v}`
    }

    async registerCategoryRadarChart() {
        const a = document.getElementById("category-echarts");
        if (!a)
            return;
        const t = await c( () => import("../assets/core-72662ce9.js"), ["assets/core-72662ce9.js", "assets/Axis-725f4b2a.js", "assets/graphic-ce8bd673.js", "assets/createSeriesData-c8f251b5.js"]);
        await c( () => import("../assets/charts-f05d9f95.js"), ["assets/charts-f05d9f95.js", "assets/graphic-ce8bd673.js", "assets/createSeriesData-c8f251b5.js", "assets/Axis-725f4b2a.js", "assets/customGraphicKeyframeAnimation-c31f2f6f.js"]).then(e => {
            t.use([e.RadarChart])
        }
        ),
        await c( () => import("../assets/components-6d07079e.js"), ["assets/components-6d07079e.js", "assets/customGraphicKeyframeAnimation-c31f2f6f.js", "assets/Axis-725f4b2a.js", "assets/graphic-ce8bd673.js"]).then(e => {
            t.use([e.TitleComponent, e.TooltipComponent])
        }
        ),
        await c( () => import("../assets/renderers-f58e1b15.js"), ["assets/renderers-f58e1b15.js", "assets/graphic-ce8bd673.js"]).then(e => {
            t.use([e.CanvasRenderer])
        }
        );
        const o = Object.values(categoryRadar)
          , r = Object.keys(categoryRadar);
        if (r.length < 3)
            return;
        a.classList.add("category-echarts");
        const i = Math.ceil(o.reduce( (e, s) => e > s ? e : s) / 5) * 5
          , n = t.init(a)
          , g = document.querySelectorAll(".dark").length > 0 ? "#ccc" : "black";
        n.setOption({
            title: {
                text: _.translate("page.categories.radar_title", "文章分类雷达图"),
                left: "center",
                top: "25px",
                textStyle: {
                    fontSize: 22,
                    fontWeight: "normal",
                    color: g
                }
            },
            tooltip: {
                trigger: "item",
                textStyle: {
                    align: "left"
                }
            },
            radar: [{
                indicator: function() {
                    for (var e = [], s = 0; s < r.length; s++)
                        e.push({
                            text: r[s],
                            max: i
                        });
                    return e
                }(),
                name: {
                    textStyle: {
                        color: g
                    }
                },
                center: ["50%", "60%"],
                radius: "60%"
            }],
            series: [{
                type: "radar",
                itemStyle: {
                    color: "rgb(123,234,185)"
                },
                lineStyle: {
                    color: "rgb(123,234,185)"
                },
                areaStyle: {
                    color: "rgb(123,234,185)"
                },
                data: [{
                    value: o,
                    name: _.translate("page.categories.radar_series_title", "文章分类数量")
                }]
            }]
        })
    }
}
u([d()], p.prototype, "registerCategories", 1);
u([d()], p.prototype, "registerCategoryRadarChart", 1);
